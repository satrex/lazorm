using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using CommandLine;
using CommandLine.Text;
using Lazorm;

namespace Lazorm
{
    enum DbKind 
    {
        SqlServer, mssql, mySql, MySql, mysql, Oracle, oracle
    }

    [Verb("show", HelpText = "Add file contents to the index.")]
    class ShowOptions
    {
        [Option('c', "connectionstring", HelpText = "Specify connection string to database.")]
        public string ConnectionString{ get; set; }

        [Option('j', "appsettingsjson", HelpText = "Specify appsettings.json file to connect database.")]
        public string AppsettingsJson { get; set; }

        [Option('k', "dbkind", HelpText = "Speciry Database Kind out of: SqlServer, MySq], Oracle")]
        public DbKind DatabaseKind { get; set; }

        [Option('n', "namespace", HelpText = "Speciry namespace of generated classes. Lazorm by default.")]
        public string Namespace { get; set; } = "Lazorm";

        [Option('o', "output", HelpText = "Specify output directory. By default ./Entities/AutoGenerated ")]
        public string OutputDir { get; set; } = "./";

        [Option('t', "tables", HelpText = "Specify tables to process. By default, we process all tables in schema.")]
        public IEnumerable<string> Tables { get; set; }
         //normal options here
        [Value(1, Default = "tables", HelpText = "Specify object by tables, columns (tables by default)", Required = true)]
        public string Value { get; set; }
    }
    
    [Verb("generate", HelpText = "Record changes to the repository.")]
    class GenerateOptions
    {
        [Option('m', "model", Required = false, HelpText = "Generates OR Mapper model class.")]
        public bool Mapper { get; set; }

        [Option('v', "validation", Required = false, HelpText = "Generates model validation (model omit keys)")]
        public bool Validation { get; set; }

        [Option('f', "fluxor", HelpText = "Generates Fluxor store set.")]
        public bool Fluxor { get; set; }

        [Option('r', "razor", Separator = ',', HelpText = "Generates razor page (not implemented)")]
        public bool RazorPage { get; set; }

        [Option('c', "connectionstring", HelpText = "Specify connection string to database.")]
        public string ConnectionString { get; set; }

        [Option('j', "appsettingsjson", HelpText = "Specify appsettings.json file to save connectionstring.")]
        public string AppsettingsJson { get; set; }

        [Option('k', "dbkind", HelpText = "Speciry Database Kind out of: SqlServer, MySq], Oracle")]
        public DbKind DatabaseKind { get; set; }

        [Option('n', "namespace", HelpText = "Speciry namespace of generated classes. Lazorm by default.")]
        public string Namespace { get; set; } = "Lazorm";

        [Option('o', "output", HelpText = "Specify output directory. By default ./Entities/AutoGenerated ")]
        public string OutputDir { get; set; }

        [Option('t', "tables", HelpText = "Specify tables to process. By default, we process all tables in schema.")]
        public IEnumerable<string> Tables { get; set; }
    }
    public class CliParser
    {
        public static void Parse(string[] args)
        {
            GenerateOptions generateOprions = null;
            ShowOptions showOptions = null;
            var parsed = Parser.Default.ParseArguments< GenerateOptions, ShowOptions>(args);   
            parsed.WithParsed<GenerateOptions>(opt => {
                if ((opt.Mapper | opt.Validation | opt.Fluxor | opt.RazorPage) == false)
                    throw new ArgumentException("You should specify output flag at least 1 out of -m|-v|-f|-r .");

                generateOprions = opt;
            });
            parsed.WithParsed<ShowOptions>(opt => showOptions = opt);
            parsed.WithNotParsed(er =>
            {
                // パース結果からデフォルトの文を生成したい場合は、HelpText.AutoBuildを使用する
                var helpText = "awesome help text ";
                // 生成後にhelpText = helpText.Add...で追加記述も可能
                Console.WriteLine($"parse failed: {helpText}");
                return;
            });

            if(generateOprions != null) { 
                if(generateOprions.Mapper)
                    GenerateModel(generateOprions);
                if (generateOprions.Validation)
                    GenerateValidation(generateOprions);
                if (generateOprions.Fluxor)
                    GenerateFluxor(generateOprions);
                if (generateOprions.RazorPage)
                    GenerateRazorPage(generateOprions);
            }

            if ( showOptions != null)
                ProcessShowCommand( showOptions);

        }

        private static void GenerateRazorPage(GenerateOptions generateOprions)
        {
            throw new NotImplementedException();
        }

        private static void GenerateFluxor(GenerateOptions generateOprions)
        {
            var outdir = generateOprions.OutputDir;
            if(generateOprions.Mapper | generateOprions.Validation | generateOprions.RazorPage)
                outdir = Environment.CurrentDirectory;
                
            foreach(var table in generateOprions.Tables)
            {
                LazormFluxorGenerator.Generator.Run(table, outdir);
            }
        }

        private static void GenerateValidation(GenerateOptions options)
        {
            var outFolder = PrepareOutputFolderForValidation(options);
            Database db = Database.CreateInstance(options.DatabaseKind.ToString().ToLower(), options.ConnectionString);

            var keyName = string.Format("{0}Key", db.Schema);
            var generator = new DataValidationGenerator(options.Namespace, db, keyName);
            var tables = new List<string>();

            // if tables not specified, then go all tables
            if (0 < options.Tables?.Count())
            {
                tables.AddRange(options.Tables);
            }
            else
            {
                db.GetTableDefs().ForEach(t =>
                    tables.Add(t.Name)
                );
            }
            tables.ForEach(t => {
                generator.Generate(t, outFolder);
            });
        }

        private static void GenerateModel( GenerateOptions options)
        {
            
            var outFolder = PrepareOutputFolderForEntity(options);
            Database db = Database.CreateInstance(options.DatabaseKind.ToString().ToLower(), options.ConnectionString);

            var keyName = string.Format("{0}Key", db.Schema);
            var generator = new DataEntityGenerator(options.Namespace, db, keyName);
            var tables = new List<string>();

            // if tables not specified, then go all tables
            if (0 < options.Tables?.Count())
            {
                tables.AddRange(options.Tables);
            }
            else
            {
                db.GetTableDefs().ForEach(t =>
                    tables.Add(t.Name)
                );
            }
            tables.ForEach(t => {
                generator.Generate(t, outFolder);
            });

            JsonSettingWriter.SetAppSettingValue(keyName, options.ConnectionString,
                options.AppsettingsJson);

        }
        private static string PrepareOutputFolderForValidation(GenerateOptions options)
        {
            var outFolder = Path.Combine(Environment.CurrentDirectory, "Entities", "Validation");
            if (!String.IsNullOrWhiteSpace(options.OutputDir))
            {
                outFolder = options.OutputDir;
                Console.WriteLine("Output directory is specified: {0}", outFolder);
            }

            // Creates folder if not exists
            if (!Directory.Exists(outFolder))
            {
                Directory.CreateDirectory(outFolder);
            }
            return outFolder;
        }

        private static string PrepareOutputFolderForEntity(GenerateOptions options)
        {
            var outFolder = Path.Combine(Environment.CurrentDirectory, "Entities", "AutoGenerated");
            if (!String.IsNullOrWhiteSpace(options.OutputDir))
            {
                outFolder = options.OutputDir;
                Console.WriteLine("Output directory is specified: {0}", outFolder);
            }

            // Creates folder if not exists
            if (!Directory.Exists(outFolder))
            {
                Directory.CreateDirectory(outFolder);
            }
            return outFolder;
        }

        private static void ProcessShowCommand( ShowOptions options)
        {
            Database db = Database.CreateInstance(options.DatabaseKind.ToString(), options.ConnectionString);

            if (options.Value == "tables")
            {
                Console.WriteLine("===  TABLE NAME  ===\n--------------------");
                db.GetTableDefs().ForEach(t =>
                    Console.WriteLine("{0} ", t.Name)
                );
            }
        }
    }
}
