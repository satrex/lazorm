<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>

@namespace <#= pageNamespace #>.Pages
@page "/<#= entityNamePlural #>/show/{Id}"
@page "/<#= entityNamePlural #>/edit/{Id}"
@page "/<#= entityNamePlural #>/new"
@inject HttpClient httpClient
@inject NavigationManager? navigation 
@using Lazorm;
@using System.Threading.Tasks;
@using Fluxor;
@using Microsoft.AspNetCore.Components;
@using Lazorm.Store.States;
@using Microsoft.Extensions.Logging; 
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Create<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Load<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Load<#= entityClassNamePlural #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Update<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Delete<#= entityClassNameSingular #>;

<h3>Edit <#= entityClassNameSingular #></h3>

@if (the<#= entityClassNameSingular #> == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@the<#= entityClassNameSingular #>" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
<#= CreateFormBody() #>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    private <#= entityClassNameSingular #> the<#= entityClassNameSingular #>;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            the<#= entityClassNameSingular #> = new <#= entityClassNameSingular #>();
        }
        else
        {
            the<#= entityClassNameSingular #> = await Get<#= entityClassNameSingular #>Async();
        }
    }
    
    private async Task<<#= entityClassNameSingular #>> Get<#= entityClassNameSingular #>Async()
    {
        // Code to retrieve list from database or API
        return await httpClient.GetFromJsonAsync<<#= entityClassNameSingular #>>("api/<#= entityClassNameSingular #>/@Id ") ?? new <#= entityClassNameSingular #>();
    }
    
    private async Task HandleValidSubmit()
    {
        await the<#= entityClassNameSingular #>.StoreAsync();
        navigation?.NavigateTo("/<#= entityNamePlural #>");
    }
}

