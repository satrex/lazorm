//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LazormPageGenerator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.CodeDom;
    using System;
    
    
    public partial class DetailPageTemplate : DetailPageTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 7 ""
            this.Write("\n@namespace ");
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( pageNamespace ));
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write(".Pages\n@page \"/");
            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityNamePlural ));
            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write("/show/{Id}\"\n@page \"/");
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityNamePlural ));
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write("/edit/{Id}\"\n@page \"/");
            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityNamePlural ));
            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write("/new\"\n@inject HttpClient httpClient\n@inject NavigationManager? navigation \n@using" +
                    " Lazorm;\n@using System.Threading.Tasks;\n@using Fluxor;\n@using Microsoft.AspNetCo" +
                    "re.Components;\n@using Lazorm.Store.States;\n@using Microsoft.Extensions.Logging; " +
                    "\n\n<h3>Edit ");
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 21 ""
            this.Write("</h3>\n\n@if (the");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(" == null)\n{\n    <p><em>Loading...</em></p>\n}\nelse\n{\n    <EditForm Model=\"@the");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("\" OnValidSubmit=\"@HandleValidSubmit\">\n    <DataAnnotationsValidator />\n");
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( CreateFormBody() ));
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("\n\n        <button type=\"submit\" class=\"btn btn-primary\">Update</button>\n    </Edi" +
                    "tForm>\n}\n\n@code {\n    private ");
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(" the");
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(";\n\n    [Parameter]\n    public int Id { get; set; }\n\n    protected override async " +
                    "Task OnInitializedAsync()\n    {\n        if (Id == 0)\n        {\n            the");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(" = new ");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("();\n        }\n        else\n        {\n            the");
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(" = await Get");
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("Async();\n        }\n    }\n    \n    private async Task<");
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write("> Get");
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write("Async()\n    {\n        // Code to retrieve list from database or API\n        retur" +
                    "n await httpClient.GetFromJsonAsync<");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(">(\"api/");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("/@Id \") ?? new ");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("();\n    }\n    \n    private async Task HandleValidSubmit()\n    {\n        await the" +
                    "");
            
            #line default
            #line hidden
            
            #line 63 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityClassNameSingular ));
            
            #line default
            #line hidden
            
            #line 63 ""
            this.Write(".StoreAsync();\n        navigation?.NavigateTo(\"/");
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entityNamePlural ));
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("\");\n    }\n}\n\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class DetailPageTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
