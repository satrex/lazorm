<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>
@namespace <#= pageNamespace #>.Pages
@page "/<#= entityNamePlural #>"
@using Lazorm
@inject HttpClient httpClient
@attribute [Authorize]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent;
<h1><#= entityClassNamePlural #></h1> 

@if (<#= entityNamePlural #>State?.Value.IsLoading ?? false)
{
    <p><em>Loading...</em></p>
}
else 
{
<table class="table">
    <thead>
        <tr>
<#= CreateTableHeader() #>
        </tr>
    </thead>
    <tbody>
        @foreach (var <#= entityNameSingular #> in <#= entityNamePlural #>State?.Value?.Current<#= entityClassNamePlural #> ?? new List<<#= entityClassNameSingular #>>())
        {
            <tr>
<#= CreateTableBody() #>
                <td>
                    <button class="btn btn-primary" @onclick="() => Edit<#= entityClassNameSingular #>(<#= entityNameSingular #>)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => Delete<#= entityClassNameSingular #>(<#= entityNameSingular #>)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-success" @onclick="Add<#= entityClassNameSingular #>">Add <#= entityClassNameSingular #></button>
}

@code {
    
    protected override async Task OnInitializedAsync()
    {
        //  products = (await GetProductsAsync()).ToList();
    }

    private void Add<#= entityClassNameSingular #>()
    {
        // TODO: Implement adding <#= entityNameSingular #> functionality
    }

    private void Edit<#= entityClassNameSingular #>(<#= entityClassNameSingular #> <#= entityNameSingular #>)
    {
        // TODO: Implement editing <#= entityNameSingular #> functionality
    }

    private void Delete<#= entityClassNameSingular #>(<#= entityClassNameSingular #> <#= entityNameSingular #>)
    {
        // TODO: Implement deleting <#= entityNameSingular #> functionality
    }
}