<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>
@namespace <#= pageNamespace #>.Pages
@page "/<#= entityNamePlural #>"
@inject HttpClient httpClient
@attribute [Authorize]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent;
@using System.Threading.Tasks;
@using Fluxor;
@using Lazorm;
@using Microsoft.AspNetCore.Components;
@using Lazorm.Store.States;
@using Microsoft.Extensions.Logging; 
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Create<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Load<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Load<#= entityClassNamePlural #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Update<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Delete<#= entityClassNameSingular #>;
<h1><#= entityClassNamePlural #></h1> 

@if (<#= entityNamePlural #>State?.Value.IsLoading ?? false)
{
    <p><em>Loading...</em></p>
}
else 
{
<<#= entityClassNameSingular #>TableComponent <#= entityClassNamePlural #>=<#= entityNamePlural #>State?.Value?.Current<#= entityClassNamePlural #> OnRowClickCallback="@ShowDetail" >
</<#= entityClassNameSingular #>TableComponent>
<button class="btn btn-success" @onclick="Add<#= entityClassNameSingular #>">Add <#= entityClassNameSingular #></button>
}

@code {
    [Inject]
	private IState<<#= entityClassNamePlural #>State>? <#= entityNamePlural #>State {get; set;}

	[Inject]
	private IDispatcher? dispatcher { get; set; }

	[Inject]
	NavigationManager? navigation {get; set;}

	[Inject]
	private ILogger<<#= entityClassNamePlural #>Page>? _logger{get; set;}

	private bool alertVisible = false;

	protected override void OnInitialized()
	{
		// Load <#= entityNamePlural #> on initial page navigation
		dispatcher?.Dispatch(new Load<#= entityClassNamePlural #>Action());

		base.OnInitialized();
	}

	private void ShowDetail(<#= entityClassNameSingular #> <#= entityNameSingular #>)
	{
		navigation?.NavigateTo($"<#= entityNamePlural #>/show/{ <#= entityNameSingular #>.Id }");
	}

    private void Add<#= entityClassNameSingular #>()
    {
        // TODO: Implement adding <#= entityNameSingular #> functionality
		navigation?.NavigateTo($"<#= entityNamePlural #>/new");
    }

    private void Edit<#= entityClassNameSingular #>(<#= entityClassNameSingular #> <#= entityNameSingular #>)
    {
        // TODO: Implement editing <#= entityNameSingular #> functionality
		navigation?.NavigateTo($"<#= entityNamePlural #>/edit/{ <#= entityNameSingular #>.Id }");
    }

}