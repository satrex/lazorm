<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>

@namespace <#= pageNamespace #>.Pages
@page "/<#= entityNamePlural #>/show/{<#= entityNameSingular #>Id}"
@inject HttpClient httpClient
@attribute [Authorize]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent;
@using System.Threading.Tasks;
@using Fluxor;
@using Lazorm;
@using Microsoft.AspNetCore.Components;
@using Lazorm.Store.States;
@using Microsoft.Extensions.Logging; 
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Create<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Load<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Load<#= entityClassNamePlural #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Update<#= entityClassNameSingular #>;
@using Lazorm.Store.Features.<#= entityClassNameSingular #>UseCase.Actions.Delete<#= entityClassNameSingular #>;
<h3><#= entityClassNamePlural #></h3>

@if (<#= entityNamePlural #>State?.Value.IsLoading ?? false)
{
    <p><em>Loading...</em></p>
}
else if (<#= entityNamePlural #>State?.Value.HasCurrentErrors ?? false || <#= entityNamePlural #>State?.Value.CurrentEntity is null)
{
    <div class="d-flex flex-column ">
        <span class="py-2">An error occured while loading <#= entityNamePlural #> data. <br />
	    Try refresh page.<br />
	    If the problem continues, contact support.</span>
    </div>
}
else if(<#= entityNamePlural #>State?.Value.CurrentEntity is not null)
{
    <#= CreateFormBody() #>
	<button class="btn btn-secondary" @onclick="() => BackToList()">Back To List</button>
	<button class="btn btn-primary" @onclick="() => StartEdition(<#= entityNamePlural #>State?.Value.CurrentEntity)">Edit</button>
}

@code {
	[Parameter]
	public string <#= entityNameSingular #>Id {get; set;} = string.Empty;

	[Inject]
	private IState<<#= entityClassNamePlural #>State>? <#= entityNamePlural #>State {get; set;}

	[Inject]
	private IDispatcher? dispatcher { get; set; }

	[Inject]
	NavigationManager? navigation {get; set;}

	[Inject]
	private ILogger<Edit<#= entityClassNameSingular #>Page>? _logger{get; set;}
	private Lazorm.<#= entityClassNameSingular #>Validation the<#= entityClassNameSingular #> = new Lazorm.<#= entityClassNameSingular #>Validation();

	private bool alertVisible = false;

	protected override void OnInitialized()
	{
		// Load the <#= entityNameSingular #> detail on initial page navigation
		if (int.TryParse(<#= entityNameSingular #>Id, out var parsedId))
		{
			var current<#= entityClassNameSingular #> = new <#= entityClassNameSingular #>() { Id = parsedId };
			dispatcher?.Dispatch(new Load<#= entityClassNameSingular #>Action(current<#= entityClassNameSingular #>));
		}
		else
		{
			var current<#= entityClassNameSingular #> = new <#= entityClassNameSingular #>();
		}

		// Register a state change to assign the validation fields
		if(<#= entityNamePlural #>State != null) <#= entityNamePlural #>State.StateChanged += (sender, e) =>
		{
			_logger?.LogInformation($"StateChanged start:");
			if (<#= entityNamePlural #>State.Value.CurrentEntity is null)
			{
			return;
			}
			_logger?.LogInformation($"Id={<#= entityNamePlural #>State.Value.CurrentEntity.Id} ");

			the<#= entityClassNameSingular #> = new Lazorm.<#= entityClassNameSingular #>Validation(<#= entityNamePlural #>State.Value.CurrentEntity);

			StateHasChanged();
			_logger?.LogInformation($"StateChanged end:");
		};

		base.OnInitialized();
	}

	private void StartEdition(<#= entityClassNameSingular #> <#= entityNameSingular #>)
	{
		navigation?.NavigateTo($"<#= entityNamePlural #>/edit/{ <#= entityNameSingular #>.Id }");
	}
	
	private void BackToList()
	{
		navigation?.NavigateTo($"<#= entityNamePlural #>/");
	}
}