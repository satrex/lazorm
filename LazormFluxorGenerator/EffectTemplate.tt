<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#  
//string[] cruds = new string[] {"Create", "Load", "Update", "Delete"};  \
string[] cruds = new string[] {"Create"}; 
string[] actionTypes = new string[] {"", "Success"};


string EntityClass = entityClassName;
string memberEntity = entityClassName;
string localEntity = entityClassName.ToLower();

   string actionClassName = crud + entityClassName + actionType + "Action"; 
   string effectClassName = crud + entityClassName + actionType + "Effect"; 
#>
using System;
using System.Threading.Tasks;
using Fluxor;
using Lazorm;
using Lazorm.Store.Features.<#= entityClassName #>UseCase.Actions.<#= crud #><#= entityClassName #>;
using Microsoft.Extensions.Logging;
using Blazor.Extensions.Logging;

namespace Lazorm.Store.Features.<#= entityClassNamePlural #>.Effects
{
    public partial class <#= effectClassName #>: Effect<<#= actionClassName #>>
    {
        private readonly ILogger<<#= effectClassName #>> _logger;

        public <#=
 effectClassName #>(ILogger<<#= effectClassName #>> logger) =>
            _logger = logger;

        protected override async Task HandleAsync(<#= actionClassName #> action, IDispatcher dispatcher)
        {
<# if (actionType == "") { #>
<# if (crud == "Load" ) { #>
            try
            {
                _logger.LogInformation($"Loading <#= entityClassName #> {action.<#= entityClassName #>.Id}...");
                
                // TODO: should change Id to array of key columns(refer to column def)
                var <#= localEntity #>Response = await <#= entityClassName #>.GetAsync(action.<#= entityClassName #>.Id);

                //_logger.LogDebug<<#= entityClassName #>> (<#= localEntity #>Response);
                dispatcher.Dispatch(new Load<#= entityClassName #>SuccessAction(<#= localEntity #>Response));
                _logger.LogInformation($"<#= entityClassName #> {action.<#= entityClassName #>.Id} loaded successfully!");
            }
            catch (Exception e)
            {
                _logger.LogError($"Error loading <#= entityClassName #> {action.<#= entityClassName #>.Id}, reason: {e.Message}");
                dispatcher.Dispatch(new Load<#= entityClassName #>FailureAction(e.Message));
            }                
<#
    } /* end Load */
    else if (crud == "Create") {
#>
           try
            {
                _logger.LogInformation($"Creating <#= entityClassName #> {action.<#= entityClassName #>}...");
                //_logger.LogDebug<<#= entityClassName #>> (action.<#= entityClassName #>);
                var createdEntity =  await action.<#= entityClassName #>.StoreAsync();

                _logger.LogInformation("<#= entityClassName #> created successfully!");
                dispatcher.Dispatch(new Create<#= entityClassName #>SuccessAction(action.<#= entityClassName #>));
            }
            catch (Exception e)
            {
                _logger.LogError($"Could not create <#= entityClassName #>, reason: {e.Message}");
                dispatcher.Dispatch(new Create<#= entityClassName #>FailureAction(e.Message));
            }
<#
    }  /* end Create */
    else if (crud == "Update" ) {
#>
            try
            {
                _logger.LogInformation($"Updating <#= entityClassName #> {action.<#= entityClassName #>.Id}...");
                //_logger.LogDebug<<#= entityClassName #>> (action.<#= entityClassName #>);
                var updatedEntity = await action.<#= entityClassName #>.StoreAsync();
               
                dispatcher.Dispatch(new <#= crud #><#= entityClassName #><#= actionType #>SuccessAction(updatedEntity));
            }
            catch (Exception e)
            {
                _logger.LogError($"Could not update <#= entityClassName #> {action.<#= entityClassName #>.Id}, reason: {e.Message}");
                dispatcher.Dispatch(new <#= crud #><#= entityClassName #>FailureAction(e.Message));
            }
<#
    }  /* end Update */
    else if (crud == "Delete" )  {
#>
            try
            {
                _logger.LogInformation($"Deleting <#= entityClassName #> {action.<#= entityClassName #>.Id}...");
                //_logger.LogDebug<<#= entityClassName #>> (action.<#= entityClassName #>);
                var droppedEntity = await action.<#= entityClassName #>.DropAsync();
               
                dispatcher.Dispatch(new <#= crud #><#= entityClassName #><#= actionType #>SuccessAction(droppedEntity));
            }
            catch (Exception e)
            {
                _logger.LogError($"Could not delete <#= entityClassName #> {action.<#= entityClassName #>.Id}, reason: {e.Message}");
                dispatcher.Dispatch(new <#= crud #><#= entityClassName #>FailureAction(e.Message));
            }
<# 
    } /* end else */ 
 } /* end actionype */ 
 else if (actionType == "Success") { 
#>

            _logger.LogInformation("<#= crud #> <#= entityClassName #> successfully, navigating back to <#= entityClassName #> listing...");
            //_logger.LogDebug<<#= entityClassName #>> (action.<#= entityClassName #>);
        
            /*
                Write code for navigating back here
            */
            await Task.Run(() => {}); 

            return;
<# } else { #>
            await Task.Run(() => {}); 

            return;

<# } /* end if */ #> 
        }
    }
}
